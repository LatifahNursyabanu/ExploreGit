##Sejarah singkat
sejarah berdirinya platform Git, bagaimana Linus Torvalds bersama tim membangun platform tersebut pada tahun 2005. Git dibangun dengan tujuan agar dapat melakukan kolaborasi antar tim serta bagaimana proyek dapat dikontrol dengan baik.
GitHub merupakan sebuah perusahaan layanan hosting repository Git berbasis Cloud. Dengan menggunakan GitHub, berkolaborasi antar anggota tim menjadi lebih mudah. GitHub adalah tools yang sangat populer karena mudah digunakan.

##istilah
<br>Git Repository  : Media penyimpanan file proyek di dalam Git server.
<br>Git Branch	    : Percabangan untuk versi baru dari proyek repository.
<br>Git Fork	      : Penyalinan dari repository orang/organisasi lain, lalu menyimpannya di dalam repository Git sendiri.
<br>Git Clone	      : Mengambil sebuah repository dan menyimpannya pada direktori lokal.
<br>Git Commit	    : Cuplikan perubahan (snapshot) dari repository Anda pada waktu tertentu.
<br>Git Push	      : Mengirim hasil dari perubahan file yang dilakukan ke dalam repository server.
<br>Git Commit      : Menyimpan hasil perubahan setiap file yang ada di dalam direktori kerja, baik itu file yang baru saja ditambahkan maupun perubahan pada file. Kemudian kita dapat menyisipkan pesan commit agar memudahkan dalam memahami riwayat perubahan. [Baca lebih lengkap tentang perintah Git Commit]
<br>Git Checkout    : Melakukan perpindahan dari commit satu ke commit yang dituju. Namun hanya bersifat sementara. Git Checkout juga dapat digunakan untuk berpindah dari satu cabang kerja (branch) ke cabang kerja lainnya. 
<br>Git Reset       : Mengembalikan keadaan suatu commit ke dalam keadaan sebelum terjadi perubahan sesuai dengan commit yang dituju. Namun, git reset akan menghapus beberapa riwayat commit sesudahnya. 
<br>Git Revert      : Mengembalikan keadaan suatu berkas sebelum terjadi suatu perubahan sesuai dengan tujuan commit yang dituju. Git Revert tidak akan menghilangkan riwayat commit sesudahnya. 
<br>Message Merge   : Digunakan untuk memberikan pesan singkat mengenai PR yang dilakukan.
<br>Description Commit  : Digunakan untuk memberikan informasi yang lebih detail mengenai PR yang dilakukan.
<br>Reviewer        : Digunakan untuk meminta lain untuk mereviu perubahan yang telah dilakukan.
<br>Assigness       : Digunakan untuk menginformasikan siapa yang memberikan tugas untuk melakukan PR.
<br>Label           : Digunakan untuk memberikan kategori pada sebuah PR, contohnya pembetulan suatu masalah (bug), penambahan fitur (enchantment), penambahan dokumentasi (documentation), atau yang lainnya.

##Explore repository
**Add a README** file atau penambahan README File pada repository baru. Ketika repository telah dibuat, GitHub secara otomatis membuatkan file Readme ke dalam repository. 
**Add .gitignore** atau penambahan berkas .gitignore pada repository. Ketika repository telah terbuat, file .gitignore akan tercipta sesuai dengan pilihan template.gitignore yang dipilih.
**Choose a license** atau penambahan berkas license pada repository. Ketika membuat repository, Anda bisa memilih lisensi untuk repository tersebut sehingga proyek yang ada di dalamnya dapat digunakan secara bebas oleh orang lain.
- New Repository, digunakan membuat repository baru dengan jenis public & private.
- Import Repository, digunakan untuk mengambil/menyalin file proyek dari vendor lain seperti Subversion atau Mercurial ke dalam repository baru pada GitHub. Proses impor dilakukan dengan menggunakan link URL.
- Gist, digunakan untuk berbagi potongan kode, catatan, melakukan daftar, dan lainnya. Seperti halnya repositori, Anda dapat menyetel dan menyimpan Intisari Anda sebagai rahasia atau publik.
- GitHub Organization, digunakan untuk berkolaborasi bersama pada suatu organisasi misalnya untuk bisnis dengan sejumlah kelebihan misalnya banyak proyek sekaligus. Pemilik dan administrator dapat mengelola hak akses anggota ke suatu data atau proyek dengan fitur keamanan dan administratif yang canggih.
- GitHub Project, digunakan untuk mengatur dan memprioritaskan pekerjaan. Anda dapat membuat papan proyek (project board) untuk mengerjakan fitur tertentu, peta alur yang komprehensif (comprehensive roadmaps), atau bahkan merilis daftar periksa (release checklists). Dengan papan proyek, Anda memiliki fleksibilitas untuk membuat alur kerja khusus yang sesuai dengan kebutuhan Anda.

##Github Dashboard
- Pull request untuk melihat semua aktivitas mengenai pekerjaan yang telah selesai dan tersimpan di dalam GitHub. 
- Issues untuk melihat semua tanggapan atau komentar mengenai permasalahan yang kita dapat saat menggunakan repository milik orang lain. 
- Marketplace untuk mencari dan memasang fitur tools pendukung yang disediakan oleh GitHub. Tools dalam marketplace akan membantu Anda dalam mengoptimalkan penggunaan GitHub di dalam proyek. 
- Explore untuk melihat berbagai informasi atau berita terkini mengenai repository, topik, dan trending di GitHub. 
- Settings untuk melakukan perubahan profil seperti username, foto, serta informasi lainnya.

##Colaborator
Seorang kolaborator dengan tingkatan read, biasanya hanya memiliki akses untuk membuka repository. Level ini direkomendasikan untuk orang non-coding (tim lain) yang ingin melihat atau berdiskusi mengenai proyek repository.
Seorang kolaborator dengan tingkatan write, biasanya digunakan oleh seorang developer atau pengembang untuk membuka, melakukan clone, dan melakukan push pada repository tersebut. Ia juga dapat mengelola issues dan pull request yang masuk.
Seorang kolabolator dengan tingkatan triage, biasanya digunakan oleh maintainer yang hanya dapat mengeloa issues dan pull request yang ada masuk ke dalam repository.
Seorang kolaborator dengan tingkatan maintain, biasanya digunakan oleh seorang project manager yang dapat mengelola beberapa pengaturan dalam repository. Ia juga dapat melakukan berbagai hal seseorang dengan tingkatan read.
Seorang kolaborator dengan tingkatan admin, biasanya digunakan oleh seseorang yang butuh mengakses secara penuh kepada repository. Ia dapat melakukan berbagai hal, termasuk mengundang kolaborator lain untuk bergabung dalam repository.
</p>
Repository Organisasi : Pemilik organisasi dapat menambahkan kolaborator dengan tingkat izin yang berbeda untuk berbagai repository.
Repository Pribadi    : Pemilik repository dapat menambahkan kolaborator dengan akses read & write untuk satu repository.
Fork                  : proses menyalin proyek repository orang lain ke repository pribadi. Fork bertindak sebagai jembatan antara repositori asli (original repository) dan repositori salinan (fork repository). Anda dapat menawarkan perubahan yang dilakukan pada repositori salinan ke repositori asli untuk membantu membuat proyek orang lain lebih baik dengan melakukan pull request.
Squash                : membuat riwayat commit yang lebih ramping dalam repository. 

##Git Branches
</p>Branch bisa disebut juga percabangan. Kita dapat meminimalisir kesalahan dalam server atau aplikasi yang berjalan sehingga mempermudah developer untuk melakukan bug fixing, hingga pembuatan fitur baru di dalam repository.
</p>Ketika pembuatan branch baru, kita memerlukan source (sumber) untuk pengembangan aplikasi, sehingga kita perlu mengambil sumbernya berdasarkan branch utama yang biasa disebut main/master. Selain itu kita juga telah belajar bagaimana melakukan perpindahan branch atau bisa disebut juga git checkout pada GitHub. 
</p>Kemudian kita mempelajari merge, yang berarti penggabungan dua branch menjadi satu. Ketika melakukan penggabungan dua branch atau merge, kita harus teliti. Sebab, jika kita melakukan kesalahan, bisa saja kita menghapus branch secara tidak sengaja. Akibatnya kita perlu melakukan pembuatan ulang branch. Oleh karena itu, perlu kehati-hatian yang lebih pada saat melakukan merge agar branch yang telah dibuat tidak terhapus. Selain itu, ketika tidak teliti juga dapat mengakibatkan conflict atau terjadinya kesalahan. Conflict terjadi karena Anda tidak memeriksa secara seksama branch utama dan sumber branch sebelum melakukan merge.






